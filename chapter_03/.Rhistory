getwd()
library(ISLR)
attach(Default)
Default
default
income
plot(balance,income)
plot(default,income)
plot(default,balance)
plot(student,balance)
plot(default,student)
plot(student,balance)
cor(student,default)
student
x<-as.numeric(student)
x
y<-as.numeric(default)
y
cor(x,y)
attach(Smarket)
Lag1[1250]
Lag2[1250]
Lag3[1250]
Lag4[1250]
Lag5[1250]
Lag6[1250]
dim(Smarket)
names(Smarket)
summary(Smarket)
pairs(Smarket)
head(Direction)
cor(Smarket)
cor(Smarket[,-9])
corr <- cor(Smarket[,-9])
View(corr)
plot(Volume)
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data = Smarket,family = binomial)
summary(lm.fit)
summary(glm.fit)
coef(glm.fit)
summary(glm.fit)$coef
summary(glm.fit)$coef[,4]
glm.probs <- predict(glm.fit,type = "response")
glm.probs[1:10]
unique(Directions)
unique(Direction)
Direction[1]
Direction[2]
?contrasts
contrasts(Direction)
glm.pred <- rep("Down",1250)
gml.pred[glm.probs>0.5] <- "Up"
glm.pred[glm.probs>0.5] <- "Up"
table(glm.pred,Direction)
mean(glm.pred==Direction)
train<-(Year<2005)
Smarket.2005 <- Smarket[!train,]
dim(Smarket.2005)
Direction.2005 <- Direction[!train]
dim(Direction.2005)
View(Smarket.2005)
glm.fit <- glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data = Smarket,family = binomial,subset = train)
glm.probs <- predict(glm.fit,Smarket.2005,type = "response")
glm.pred <- rep("Down",252)
glm.pred[glm.probs>0.5] <- "Up"
table(glm.pred,Direction.2005)
mean(Direction.2005)
mean(glm.pred==Direction.2005)
ls()
library(MASS)
lda.fit <- lda(Direction~Lag1+Lag2,data = Smarket,subset = train)
lda.fit
lda.pred <- predict(lda.fit,Smarket.2005)
names(lda.pred)
head(lda.fit)
table(lda.pred$class,Direction.2005)
qda.fit <- qda(Direction~Lag1+Lag2,data = Smarket,subset = train)
qda.fit
qda.class <- predict(qda.fit,Smarket.2005)$class
table(qda.class,Direction.2005)
qda.x <- predict(qda.fit,Smarket.2005)$x
qda.x
names(qda.pred)
qda.pred <- predict(qda.fit,Smarket.2005)
names(qda.pred)
names(lda.pred)
lda.pred$x
plot(lda.pred$x)
plot(lda.pred$class,lda.pred$x)
table(qda.class,Direction.2005)
151/252
library(class)
train.X <- cbind(Lag1,Lag2)[train,]
test.X <- cbind(lag1,lag2)[!train,]
test.X <- cbind(Lag1,Lag2)[!train,]
train.Direction <- Direction[train]
set.seed(1)
knn.pred <- knn(train.X,test.X,train.Direction,k=1)
?knn
table(knn.pred,Direction.2005)
dim(Caravan)
attach(Caravan)
summary(Purchase)
standard.X <- scale(Caravan[,-86])
var(Caravan[,1])
var(Caravan[,2])
var(standard.X[,1])
var(standard.X[,2])
mean(Caravan[,1])
mean(Caravan[,2])
mean(standard.X[,2])
mean(standard.X[,1])
test<-1:1000
train.X <- standard.X[-test,]
test.X <- standard.X[test,]
train.Y <- Purchase[-test,]
train.Y <- Purchase[-test]
test.Y <- Purchase[test]
set.seed(1)
knn.pred <- knn(train.X,test.X,train.Y,k=1)
mean(test.Y!="No")
mean(test.Y!=knn.pred)
table(knn.pred,test.Y)
library(ISLR)
set.seed(1)
train <- sample(392,196)
?sample
lm.fit <- lm(mpg~horsepower,data = Auto,subset = train)
mean((Auto$mpg-predict(lm.fit,Auto))[-train]^2)
glm.fit <- glm(mpg~horsepower,data = Auto)
coef(glm.fit)
library(boot)
glm.fit <- gml(mpg~horsepower,data = Auto)
glm.fit <- glm(mpg~horsepower,data = Auto)
cv.err <- cv.glm(Auto,glm.fit)
cv.err$delta
cv.err <- rep(0,5)
for (i in 1:5){
gml.fit <- glm(mpg~ploy(horsepwer,i),data = Auto)
cv.err[i] <- cv.glm(Auto,glm.fit)$delta[i]
}
for (i in 1:5){
gml.fit <- glm(mpg~poly(horsepwer,i),data = Auto)
cv.err[i] <- cv.glm(Auto,glm.fit)$delta[i]}
for (i in 1:5){
gml.fit <- glm(mpg~poly(horsepower,i),data = Auto)
cv.err[i] <- cv.glm(Auto,glm.fit)$delta[i]}
cv.err
cv.err <- rep(0,5)
for (i in 1:5){
gml.fit <- glm(mpg~poly(horsepower,i),data = Auto)
cv.err[i] <- cv.glm(Auto,glm.fit)$delta[i]}
for (i in 1:5){
gml.fit <- glm(mpg~poly(horsepower,i),data = Auto)
cv.err[i] <- cv.glm(Auto,glm.fit)$delta[1]}
cv.err
for (i in 1:5){
+ gml.fit <- glm(mpg~poly(horsepower,i),data = Auto)
+ cv.err[i] <- cv.glm(Auto,glm.fit)$delta[1]}
> cv.err
for (i in 1:5){
+ gml.fit <- glm(mpg~poly(horsepower,i),data = Auto)
+ cv.err[i] <- cv.glm(Auto,glm.fit)$delta[1]}
cv.err
for (i in 1:5){
gml.fit <- glm(mpg~poly(horsepower,i),data = Auto)
cv.err[i] <- cv.glm(Auto,glm.fit)$delta[1]}
cv.err
for (i in 1:5){
glm.fit <- glm(mpg~poly(horsepower,i),data = Auto)
cv.err[i] <- cv.glm(Auto,glm.fit)$delta[1]}
cv.err
set.seed(17)
cv.err.10 <- rep(0,10)
for (i in 1:10){
gml.fit <- glm(mpg~poly(horsepower,i),data = Auto)
cv.err.10[i] <- cv.glm(Auto,glm.fit,K = 10)$delta[1]}
cv.err.10
plot(1:10,cv.err.10)
plot(1:10,cv.err.10,type = "line")
plot(1:10,cv.err.10,type = "l")
plot(1:10,cv.err.10,type = line)
plot(1:10,cv.err.10,type = 'line')
plot(1:10,cv.err.10,type = "l")
plot(1:10,cv.err.10,type = "l")
plot(1:10,cv.err.10,type = "l")
plot(1:10,cv.err.10,type = "line")
plot(1:10,cv.err.10,type = "l")
plot(1:10,cv.err.10,type = "l")
plot(1:10,cv.err.10,type = "line")
plot(1:10,cv.err.10,type = "line")
alpha.fn <- function(data,index){
X<-data$X[index]
Y<-data$Y[index]
return((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
alpha.fn(Portfolio,1:100)
set.seed(1)
alpha.fn(Portfolio,sample(100,100,replace = T))
boot(Portfolio,alpha.fn,R = 1000)
dim(Portfolio)
boot(Portfolio,alpha.fn,R = 1000)
boot(Portfolio,alpha.fn,R = 1000)
boot.fn <- function(data,index)
return(coef(lm(mpg~horsepower,data = data,subset = index)))
boot.fn(Auto,1:392)
set.seed(1)
boot.fn(Auto,sample(392,392,replace = T))
boot.fn(Auto,sample(392,392,replace = T))
boot(Auto,boot.fn,1000)
summary(lm(mpg~horsepower,data=Auto))$coef
library(ISLR)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters$Salary))
Hitters <- na.omit(Hitters)
install.packages("leaps")
library(leaps)
regfit.full <- regsubsets(Salary~.,Hitters)
summary(regfit.full)
regfit.full <- regsubsets(Salary~.,Hitters,nvmax=19)
summary(regfit.full)
ref.summary <- summary(regfit.full)
reg.summary <- summary(regfit.full)
names(reg.summary)
reg.summary$cp
reg.summary$bic
reg.summary$rsq
par(mfrow=c(2,2))
plot(reg.summary$rss,ylan="RSS",type="l")
plot(reg.summary$rss,ylab ="RSS",type="l")
warnings()
par(mfrow=c(2,2))
plot(reg.summary$rss,ylab ="RSS",type="l")
par(mfrow=c(2,2))
plot(reg.summary$rss,ylab ="RSS",type="l")
plot(reg.summary$adjr2,ylab ="adjusted Rsq",type="l")
which.max(reg.summary$adjr2)
points(11,reg.summary$adjr2[11],col="red",cex=2,pch=20)
plot(reg.summary$cp,ylab = "Cp",type = "l")
points(10,reg.summary$cp[10],col="red")
points(10,reg.summary$cp[10],col="red",cex=2,pch=20)
plot(reg.summary$bic,ylab = "BIC",type = "l")
points(6,reg.summary$bic[6],col="red",cex=2,pch=20)
plot(regfit.full,scale="r2")
plot(regfit.full,scale="r2")
plot(regfit.full,scale="adjr2")
plot(regfit.full,scale="Cp")
plot(regfit.full,scale="bic")
coef(regfit.full,6)
coef(regfit.full,7)
regfit.fwd <- regsubsets(Salary~,data=Hitters,nvmax=19,method="forward")
regfit.fwd <- regsubsets(Salary~.,data=Hitters,nvmax=19,method="forward")
summary(regfit.fwd)
regfit.bwd <- regsubsets(Salary~.,data=Hitters,nvmax=19,method="backward")
summary(regfit.bwd)
coef(regfit.fwd,7)
coef(regfit.bwd,7)
set.seed(1)
train <- sample(c(TRUE,FALSE),nrow(Hitters),rep=TRUE)
test <- !train
regfit.best <- regsubsets(Salary~.,data=Hitters[train,],nvmax = 19)
test.mat <- model.matrix(Salary~.,data=Hitters[test,])
val.errors <- rep(NA,19)
for (i in 1:19){
coefi <- coef(regfit.best,id=i)
pred <- test.mat[,names(coefi)]%*%coefi
val.errors[i] <- mean((Hitters$Salary[test]-pref)^2)
}
for (i in 1:19){
coefi <- coef(regfit.best,id=i)
pred <- test.mat[,names(coefi)]%*%coefi
val.errors[i] <- mean((Hitters$Salary[test]-pred)^2)
}
val.errors
predict.regsubsets <- function(object,newdata,id,...){
form <- as.formula(object$call[[2]])
mat <- model.matrix(form,newdata)
coefi <- coef(object,id=id)
xvars <- names(coefi)
mat[,xvars]%*%coefi
}
coef(regfit.best,10)
regfit.best <- regsubsets(Salary~.,data=Hitters,nvmax = 19)
coef(regfit.best,10)
k <- 10
set.seed(1)
folds <- sample(1:k,nrows(Hitters),replace = TRUE)
folds <- sample(1:k,nrow(Hitters),replace = TRUE)
cv.errors <- matrix(NA,k,19,dimnames=list(NULL,paste(1:19)))
for (j in 1:k){
best.fit<-regsubsets(Salary~.,data = Hitters[folds!=j,],nvmax=19)
for (i in 1:19){
pred <- predict(best.fit,Hitters[folds==j,],id=i)
cv.errors[j,i] <- mean((Hitters$Salary[folds==j]-pred)^2)
}
}
mean.cv.errors <- apply(cv.errors,2,mean)
mean.cv.errors
plot(mean.cv.errors,type='b')
reg.best <- regsubsets(Salary~.,data = Hitters,nvmax = 19)
coef(reg.best,11)
install.packages("glmnet")
x<-model.matrix(Salary~.,Hitters)[,-1]
y <- Hitters$Salary
library(glmnet)
grid <- 10^seq(10,-2,length=100)
ridge.mod <- glmnet(x,y,alpha = 0,lambda = grid)
dim(coef(ridge.mod))
ridge.mod$lambda[50]
coef(ridge.mod)[,50]
sqrt(sum(coef(ridge.mod)[-1,50]^2))
install.packages("pls")
library(pls)
set.seed(2)
pcr.fit <- pcr(Salary~.,data = Hitters,scale=TRUE,valiadation = "CV")
summary(pcr.fit)
pcr.fit <- pcr(Salary~.,data = Hitters,scale=TRUE,validation = "CV")
summary(pcr.fit)
validationplot(prc.fit,val.type = "MSEP")
validationplot(pcr.fit,val.type = "MSEP")
pcr.fit <- pcr(y~x,scale = T,ncomp=7)
summary(pcr.fit)
plsr.fit <- plsr(y~x,scale = T,ncomp=2)
summary(plsr.fit)
expa(−6+0.05∗40+1∗3.5)
expa(−6+0.05∗40+1∗3.5)
exp(−6+0.05∗40+1∗3.5)
exp(−6+0.05*40+1*3.5)
exp(−6+0.05*40+1*3.5)
exp(-6)
exp(-6+0.05*40+1*3.5)
c<-exp(-6+0.05*40+1*3.5)
c/(1+c)
0.8*exp(-0.5)/(0.8*exp(-0.5)+0.2*exp(-16/72))
0.37/1.37
0.16/0.84
setwd("~/GitHub/ISLR/chapter_03")
Carseats$
s
?ISLR
library(knitr)
knit("Problem_3.10.Rmd")
lm.fit <- lm(y ~ x+0)
set.seed(1)
x <- rnorm(100)
y <- 2*x + rnorm(100)
lm.fit <- lm(y ~ x+0)
summary(lm.fit)
